#include<bits/stdc++.h>
using namespace std;
const int N=1e6+7,K=15,p=998244353;
int n,k,f[N][K],g[N][K];
int add(int a,int b){
	if(a+b>=p) return a+b-p; return a+b;
}
int dec(int a,int b){
	if(a-b<0) return a-b+p; return a-b;
}
inline void solve(){
	cin>>n>>k;
	f[0][0]=g[0][0]=1;
	for(int i=1;i<=n;i++){
		g[i][0]=1;
		for(int j=1;j<=k;j++){
			f[i][j]=g[i-1][j-1];
			if(i>2&&i!=n)f[i][j]=dec(f[i][j],f[i-2][j-1]);
			g[i][j]=add(g[i-1][j],f[i][j]);
		}
		f[i][k+1]=add(g[i-1][k],g[i-1][k+1]);
		if(i>2&&i!=n)f[i][k+1]=dec(f[i][k+1],add(f[i-2][k],f[i-2][k+1]));
		g[i][k+1]=add(g[i-1][k+1],f[i][k+1]); 
	}
	cout<<add(f[n][k],f[n][k+1])<<endl;
} 
signed main(){
	solve();
	return 0;
}
/*
DP
找充要条件 
给你一个序列b，怎么判定它是否是一个合法的序列 
a=[1,1,1,1,2,3]
b=[4,3,2,1,1,1]
最靠近左侧有x个一模一样的数
b=[x,x-1,x-2,x-3,...,1, 
最靠近右侧有x个一模一样的数
b=             1,...,x-2,x-1,x]
在中间有x个一模一样的数
a=[1,2,2,2,2,3]
b=[1,1,2,2,1,1]
2,2,2 在中间[1,2,1]
2,2  [1,1] [1][1]
2  [1]
2,2,2,2  [1,2,2,1]
2,2,2,2,2  [1,2,3,2,1]
2,2,2,2,2,2 [1,2,3,3,2,1]

a=[3,3,3,2,2,2,2,2,1,1,1]
b=[3,2,1,1,2,3,2,1,1,2,3]
所有的区间划分成三种，第一种是最左侧，第二种是最右侧，第三种是中间
甚至可以唯一划分
[|3,2,1|1,2,3,2,1|1,2,2,1|1,2,3]
 [1,1]  不知道是两个一样的数，还是两个不同的数 
给你一个序列b
除去连续好几个[1]这种情况以外，我们可以知道这个序列的唯一划分 
一共有7段
[3,2,1|1,2,2,1|1,2,3,2,1|1,2,2,1|1,2,3,2,1|1,2,2,1|1,2,3]
最终的段数一定是大于等于k的
每段肯定是相同的数， 
从这个角度，段数肯定越多越好
[1,1,1,1,1,] 肯定是划分成[1][1][1][1][1][1]是最好的 

k=5,一共有7段
1,2,3,4,5,1,2 
贪心的角度，因为长度为2的区间和2个1没有办法区分，其他都可以区分
dp[i][j]表示前i个数划分成了j个区间的方案数
开头的x个数是可以区分的
开头是1个数[1]
开头是2个数[2,1]
开头是3个数[3,2,1]
初始化dp[i][1]=1 

dp[i][j]->dp[i+1][j+1] //放了一个长度为1的区间
dp[i][j]->dp[i+3][j+1] //放了一个长度为3的区间
最后一段的时候
dp[i][j] -> dp[n][j+1]
最终答案就是所有j>=k的所有dp[i][j]之和
k=10,j=12 可以和11取个min
j:0,1,2,...,k+1 
->前缀和优化 

dp[i][j]<-S[i-1][j-1],dp[i-1][j-1]+dp[i-2][j-1]dp[i-3][j-1],dp[i-4][j-1],dp[i-5][j-1]
-dp[i-2][j-1]
 
 b的形态
 [1][1]
 [1,1] 

*/
